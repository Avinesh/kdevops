config FSTESTS_XFS_MANUAL_COVERAGE
	bool "Enable manual coverage selection"
	default n
	help
	  By default we aim to spawn enough hosts to cover testing the full
	  range of supported features upstream on the Linux kernel for xfs,
	  and for you to also be able to do development on each section
	  concurrently. This consists of a total of 16 hosts created, disabling
	  this option reduces let's you manually select only the sections you
	  want to test. This is useful if for example you have reduces system
	  resources or your target kernel does not enable certain features
	  which you don't care to test for.

	  Since fstests tests are not parallized and cannot easily be parallized
	  and since there are many different ways in which you can create an
	  xfs filesystem we have devised a strategy to split up tests by the
	  type of xfs configuration used when you created the filesystem. The
	  fstests suite allows you to specify different configurations using
	  "sections" on an fstests configuration file. We create then one host
	  per target section on x86_64.

	  Today this consists of 8 different sections. Each section uses
	  different mkfs.xfs commands which enable different features. By
	  default we also rely on two spawned hosts per tested section, one
	  used to establish a baseline and another for development purposes.
	  Since a total of 8 xfs sections are currently tested with kdevops
	  this means by default 16 hosts will be spawned to test xfs.

	  You can enable this to allow you to override the spawned hosts, to
	  reduce the number of sections tested and spanwed hosts.

config FSTESTS_XFS_BASELINE_AND_DEV
	bool "Enable both a baseline and development system per target test"
	default y
	help
	  By default a host is created for each target fstests for both to
	  track a baseline and to do development. That is, two hosts are created
	  per target test. If you are constrained with system resources disable
	  this option and only one system will be created for you for each
	  target test, and you can use that for both basline tracking and
	  development. This just means you have reboot to a different kernel
	  if you want to switch between a baseline and a development kernel
	  to test. If enabled, the host baseline will be created as well as
	  the development host, the development hostname is the same as the
	  baseline host but with an added "-dev" postfix.

if FSTESTS_XFS_MANUAL_COVERAGE

config FSTESTS_XFS_SECTION_CRC
	bool "Enable testing section: xfs_crc"
	default y
	help
	  This will create a host to test the baseline of fstests using the
	  following configuration, which enables CRC:

	      [xfs]
	      MKFS_OPTIONS='-f -m crc=1,reflink=0,rmapbt=0, -i sparse=0'
	      FSTYP=xfs

config FSTESTS_XFS_SECTION_NOCRC
	bool "Enable testing section: xfs_nocrc"
	default y
	help
	  This will create a host to test the baseline of fstests using the
	  following configuration without CRC enabled. This is useful to test
	  older kernels which lacked CRC support.

	      [xfs_nocrc]
	      MKFS_OPTIONS='-f -m crc=0,reflink=0,rmapbt=0, -i sparse=0,'
	      FSTYP=xfs
	      [xfs]

config FSTESTS_XFS_SECTION_NOCRC_512
	bool "Enable testing section: xfs_nocrc_512"
	default y
	help
	  This will create a host to test the baseline of fstests using the
	  following configuration without CRC enabled using 512 byte block size.
	  This is useful to test older kernels which lacked CRC support.

	      [xfs_nocrc_512]
	      MKFS_OPTIONS='-f -m crc=0,reflink=0,rmapbt=0, -i sparse=0, -b size=512,'
	      FSTYP=xfs

config FSTESTS_XFS_SECTION_REFLINK
	bool "Enable testing section: xfs_reflink"
	default y
	help
	  This will create a host to test the baseline of fstests using the
	  following configuration which enables reflinks.

	      [xfs_reflink]
	      MKFS_OPTIONS='-f -m reflink=1,rmapbt=1, -i sparse=1,'
	      FSTYP=xfs

config FSTESTS_XFS_SECTION_REFLINK_1024
	bool "Enable testing section: xfs_reflink_1024"
	default y
	help
	  This will create a host to test the baseline of fstests using the
	  following configuration which enables reflink using 1024 byte
	  block size.

	      [xfs_reflink]
	      MKFS_OPTIONS='-f -m reflink=1,rmapbt=1, -i sparse=1,'
	      FSTYP=xfs

config FSTESTS_XFS_SECTION_EXTERNAL_LOGS
	bool "Enable testing sections which use an external log device"
	default y
	help
	  Enabling this option allows you to test xfs configuration which
	  require the use of an external log device.

if FSTESTS_XFS_SECTION_EXTERNAL_LOGS

config FSTESTS_XFS_SECTION_LOGDEV
	bool "Enable testing section: xfs_logdev"
	default y
	help
	  This will create a host to test the baseline of fstests using the
	  following configuration which enables the usage of writing metadata
	  to an external log device.

	      [xfs_logdev]
	      MKFS_OPTIONS="-f -m crc=1,reflink=0,rmapbt=0, -i sparse=0 -lsize=1g"
	      SCRATCH_LOGDEV=/dev/some-device
	      USE_EXTERNAL=yes
	      FSTYP=xfs

config FSTESTS_XFS_SECTION_RTDEV
	bool "Enable testing section: xfs_realtimedev"
	default y
	help
	  This will create a host to test the baseline of fstests using the
	  following configuration which enables the usage of real time device:

	      [xfs_realtimedev]
	      MKFS_OPTIONS="-f -lsize=1g"
	      SCRATCH_LOGDEV=@FSTESTSSCRATCHLOGDEV@
	      SCRATCH_RTDEV=@FSTESTSSCRATCHRTDEV@
	      USE_EXTERNAL=yes
	      FSTYP=xfs

endif # FSTESTS_XFS_SECTION_EXTERNAL_LOGS

endif # FSTESTS_XFS_MANUAL_COVERAGE
