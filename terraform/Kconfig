if TERRAFORM

config TERRAFORM_LIMIT_BOXES
	bool "Limit the number of boxes creaed beyond what the project defines"
	default y
	help
	  If enabled we and you are running 'make menuconfig' as user sonia,
	  then we'd infer this and peg sonia as the default user name for you.
	  We'll simply run $(shell echo $USER).

if TERRAFORM_LIMIT_BOXES

config TERRAFORM_LIMIT_NUM_BOXES
	int "Limit the number of boxes to this number"
	default 1
	help
	  If enabled and say you have 2 hosts enabled we'll only create 1.
	  You can use this if you are afraid of getting chaged on your cloud
	  provider while taking kdevops out for a spin on your cloud provider.

endif # TERRAFORM_LIMIT_BOXES

config TERRAFORM_SSH_USER_INFER
	bool "Selecting this will infer your username from you local system"
	default y
	help
	  If enabled we and you are running 'make menuconfig' as user sonia,
	  then we'd infer this and peg sonia as the default user name for you.
	  We'll simply run $(shell echo $USER).

config TERRAFORM_SSH_CONFIG_USER
	string "The username to create on the target systems"
	default $(shell, echo $USER) if TERRAFORM_SSH_USER_INFER
	default "admin" if !TERRAFORM_SSH_USER_INFER
	help
	  The ssh public key which will be pegged onto the systems's
	  ~/.ssh/authorized_keys file so you can log in.

config TERRAFORM_SSH_CONFIG_PUBKEY_FILE
	string "The ssh public key to use to log in"
	default "~/.ssh/kdevops_terraform.pub"
	help
	  The ssh public key which will be pegged onto the systems's
	  ~/.ssh/authorized_keys file so you can log in.

config TERRAFORM_SSH_CONFIG_GENKEY
	bool "Should we create a new random key for you?"
	default y
	help
	  If enabled we will create a new ssh key for you, to be used to log in
	  to the systems created by terraform. If the file already exists we
	  won't overwrite to it, uness you enable the next option.

	  Enabling this is highly encouraged, given the security concerns of
	  old development keys lingering around for too long. Development
	  systems aren't always on the most trusted systems, and since the
	  target systems are ephemeral, if you use a key you typically use
	  to log in to more important systems you are putting that key at
	  risk. By encouraging the ssh keys to be just as ephemeral as the
	  development systems created, we we ensuring there is no leakage of
	  valuable ssh keys.

	  You are encouraged to be running haveged on your local system.

if TERRAFORM_SSH_CONFIG_GENKEY

config TERRAFORM_SSH_CONFIG_GENKEY_OVERWRITE
	bool "Should we destroy any existing key if the file already exists?"
	default y
	help
	  If enabled we will destroy your old key if it existed. This is
	  highly encouraged. You don't want to keep old keys around forever
	  for all your development ephemeral systems.

config TERRAFORM_SSH_CONFIG_GENKEY_EMPTY_PASSPHRASE
	bool "Should we create the key with an empty passphrase?"
	default y
	help
	  If enabled your ssh key will not have an associated passphrase with
	  it. This is fine if you are just using ephemeral development systems.

endif # TERRAFORM_SSH_CONFIG_GENKEY

config TERRAFORM_SSH_CONFIG_UPDATE
	bool "Update your ssh configuration for you?"
	default y
	help
	  If enabled, your ssh configuration file will be updated for you based
	  on the results obtained from the bring up. This is useful in case
	  it is not clear what the IP address of the hosts just created are.

	  This is enabled by default, as this is the promise by kdevops, to be
	  easy to use with sensible but careful deafults. If you are concerned
	  for mistakes you can enable backup copies to be done per iteration.

	  You are encourated to leave this enabled, uness you really don't trust
	  this code.

if TERRAFORM_SSH_CONFIG_UPDATE

config TERRAFORM_SSH_CONFIG
	string "The ssh configuration file to update for systems created"
	default "~/.ssh/config"
	help
	  The ssh configuration file we should update, for each of the systems
	  created by terraform.

config TERRAFORM_SSH_CONFIG_UPDATE_STRICT
	bool "Use strict configuration settings when adding each host"
	default y
	help
	  If enabled when we update your ssh host we will add the following
	  few more lines to each entry:

	     UserKnownHostsFile /dev/null
	     StrictHostKeyChecking no
	     PasswordAuthentication no
	     IdentitiesOnly yes
	     LogLevel FATAL

	  You are encouraged to use this.

config TERRAFORM_SSH_CONFIG_UPDATE_BACKUP
	bool "Create a backup per ssh config file update"
	default y
	help
	  This will create a backup of your ssh configuration file each
	  time an operation is done on it. It is overkill paranoia, but a
	  a good idea anyway for now. Maybe one day we'll default to n and
	  this will just become a debug option.

	  In order for ssh configuration updates to work we must first remove
	  the old host entries which match the same name. We do this in one
	  shot, and backup the file prior to removal. Your ssh configuration
	  file is then back up to reflect what it looked like prior to removal
	  of hosts in the file:

	     ~/.ssh/config.kdevops.backup.removal

	  Then we add all hosts to your ssh configuration, but prior to adding
	  them we also do a backup of the ssh configuration file once again.
	  So since we are removing the old hosts, this would be after removal
	  of the old hosts. Your backup prior to addition of the hosts is:

	     ~/.ssh/config.kdevops.backup.add

endif # TERRAFORM_SSH_CONFIG_UPDATE

choice
	prompt "Choose your cloud provider"
	default TERRAFORM_AWS

config TERRAFORM_AWS
	bool "AWS - Amazon Web Services"
	help
	  Enabling this means you are going to use AWS for your cloud solution.

config TERRAFORM_GCE
	bool "GCE - Google Cloud Engine"
	help
	  Enabling this means you are going to use GCE for your cloud solution.

config TERRAFORM_OPENSTACK
	bool "OpenStack"
	help
	  Enabling this means you are going to use OpenStack for your cloud
	  solution.

config TERRAFORM_AZURE
	bool "Azure"
	help
	  Enabling this means you are going to use Azure for your cloud
	  solution.

endchoice

source "terraform/aws/Kconfig"

endif # TERRAFORM
