---
- name: Adds the user to the respective distro libvirt groups
  become: yes
  become_method: sudo
  user:
    name: "{{ ansible_env.USER }}"
    groups: libvirt,kvm,qemu
    append: yes
  when: 'not only_verify_user|bool'

- name: Check if apparmor_status exists
  stat:
    path: /usr/sbin/apparmor_status
  register: apparmor_file_stat_result
  when: 'only_verify_user|bool'

- name: Verify if apparmor is disabled when applicable
  become: yes
  become_method: sudo
  command:
    cmd: /usr/sbin/apparmor_status --enabled
  register: apparmor_check
  failed_when: apparmor_check.rc == 0
  when:
    - 'only_verify_user|bool'
    - 'apparmor_file_stat_result.stat.exists'

- name: Check if getenforce exists
  stat:
    path: /usr/sbin/getenforce
  register: getenforce_file_stat_result
  when: 'only_verify_user|bool'

- name: Check if SELinux is enabled
  command:
    cmd: /usr/sbin/getenforce
  register: selinux_check
  when:
    - 'only_verify_user|bool'
    - 'getenforce_file_stat_result.stat.exists'

- name: Inform if the user must disable SELinux
  register: selinux_enabled
  debug:
    msg: "SELinux is enabled which may cause problems without the proper svirt_t context settings, disable SELinux or patch this thing to set the contexts properly"
  failed_when: '"Enforcing" in selinux_check.stdout'
  when:
    - 'only_verify_user|bool'
    - 'selinux_check is defined and "Enforcing" in selinux_check.stdout'

- name: Verifies user's effective group allows to run libvirt/kvm without being root
  shell: groups | grep {{ item }}
  with_items:
    - libvirt
    - kvm
    - qemu
  loop_control:
    label: "Verifying if user's current effective groups includes {{ item }}"
  register: group_check
  failed_when: False
  ignore_errors: true
  when: 'only_verify_user|bool'

- name: Inform if user must log out and back in to use libvirt as a regular user
  register: user_groups_ready
  debug:
    msg: "User group settings are not in effect, you must log out and back in to make group {{ item.item }} be part of your effective group"
  failed_when: item.rc is undefined or item.rc != 0
  when:
    - 'only_verify_user|bool'
    - 'item.rc != 0'
  loop: "{{ group_check.results }}"
  loop_control:
    label: "Ensure if user's current effective groups includes {{ item.item }}"
